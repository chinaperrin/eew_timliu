function [cellList] = get_merged_cellList(zList,dm,dr,nmin,o_debug,s)

rng(s); %randi([1 6],20,1)  

% Merge data cells into clusters of cell until there are at least nmin data
% points in each cluster. 
% Strategy: Randomly select cell with ndat<nmin. If cell has unmerged 
%           neighbour cells, add randomly selected neighbour cells until 
%           there are enough data points in cluster. If there are no 
%           unmerged neighbours, find nearest neighbour in r-direction that 
%           belongs to a cluster & merge current cell to that cluster.

% menandrin@gmail.com, 140919


% Use 'ii' for linear indices, il for line- and ic for column-indices
%
% cList = 'current list'  , list of linear cell indices in current cluster
% nList = 'neighbour list', list of linear cell indices of neighbouring
%         cells
% ndat  = a nm-1 by nr-1 matrix, containing #data points per cell
%
% use 'line' instead of 'row' to avoid confusion with r=distance
% m-values as lines   --> il
% r-values as columns --> ic

% Outstanding tasks / ideas:
% - Voronoi tesselations instead of fixed cells
% - exclude R>50 for M<3
% - instead of random walk, directly find nearest neighbours that are non-zero


%% 1. Compute number of data points in equally spaced m- & r-bins

r = zList.hypDist;
m = zList.m;

rVect = 0:dr:100;      % r cell corners
nr    = numel(rVect);

mVect = 2:dm:8;        % m cell corners
nm    = numel(mVect);

ndat = zeros(nm-1,nr-1);
for im = 1:nm-1
    mlo = mVect(im);
    mup = mVect(im+1);
    
    for ir = 1:nr-1
        rlo = rVect(ir);
        rup = rVect(ir+1);
        
        ndat(im,ir) = sum( (m<mup) & (m>=mlo) & (r<rup) & (r>=rlo) );
    end
end

if o_debug
    ndatplot            = ndat;
    ndatplot(ndat>nmin) = nmin;
    figure(33); clf; hold on;
    imagesc(rVect(1:end-1)+dr/2,mVect(1:end-1)+dm/2,ndatplot)
    colorbar
    set(gca,'xlim',[min(rVect) max(rVect)],'ylim',[min(mVect) max(mVect)])
end
%plot(50,2,'xw','lineWidth',2)
ndat_bak = ndat;



%% 2. Merge cells until all clusters contain at least nmin data points 

% Store linear indices of cells and corresponding #data points <ndat>
iimax = numel(ndat);

% Each of the <nm-1> * <nr-1> cells has an entry in cellList
cellList.cid      = zeros(iimax,1,'uint16');                    % Cluster identification number
cellList.isMerged = false(iimax,1);                             % Flag for whether cell is part of cluster or not

% Each cluster has a list of linear cell indices in clusterList 
clusterList.ii    = cell (iimax,1);                             % Linear cell indices of all cells in a given cluster

%cellList.ndat     = ndat([1:iimax]');           % No. of data points per cell (updated upon merging)

%ni  = numel( find(cellList.ndat<nmin & cellList.ndat>0) ); 
ni  = numel( find(ndat<nmin & ndat>0) ); 
cid = 0;    

while ni>0  % While there are cells with ndat<nmin
    
    % Randomly pick 1 cell with ndat<nmin
    %idx = find(cellList.ndat<nmin & cellList.ndat>0);
    idx = find(ndat<nmin & ndat>0);
    ii  = idx(randi([1 numel(idx)],1,1));
    n   = ndat(ii);
    
    % Linear indices of fields in that are included in current cluster
    ii_cList                    = ii;
    cellList.isMerged(ii_cList) = true;
    
    % Linear indices of neighbouring fields that could be added to cluster
    ii_nList = find_and_check_neighbourCells(ii,mVect,rVect,cellList.isMerged);
    
    if o_debug
        [il,ic] = ind2sub(size(ndat),ii);
        plot(rVect(ic)+dr/2,mVect(il)+dm/2,'dw','markerFaceColor','r','markerSize',12,'markerEdgeColor','w','lineWidth',2)
        pause(.01)
    end
    
    % Case 1: there are unmerged neighbours
    % -->     add cells until there are enough data points in cluster
    if ~isempty(ii_nList)

        while n<nmin
            
            % Randomly choose 1 neighbouring cell, add it to list of included cells 
            iix                         = ii_nList(randi([1 numel(ii_nList)],1,1));
            ii_cList                    = [ii_cList; iix];
            cellList.isMerged(ii_cList) = true;
            n                           = n+ndat(iix);                      % Update ndat
            ndat(ii_cList)              = n;
            
            % Remove added cell from neighbourList, find its own neighbours 
            % and add them to neighbourList
            ii_nList         = ii_nList(ii_nList~=iix);
            ii_newNeighbours = find_and_check_neighbourCells(iix,mVect,rVect,cellList.isMerged);
            ii_nList         = unique([ii_nList; ii_newNeighbours]);
            
            if o_debug
                % Update colormap
                ndatplot            = ndat;
                ndatplot(ndat>nmin) = nmin;
                gcf; imagesc(rVect(1:end-1)+dr/2,mVect(1:end-1)+dm/2,ndatplot)
                colorbar; set(gca,'xlim',[min(rVect) max(rVect)],'ylim',[min(mVect) max(mVect)])
                
                % Plot cells
                [iln,icn] = ind2sub(size(ndat),ii_nList);   % Line- & column-indices of neighbours
                [ilm,icm] = ind2sub(size(ndat),ii_cList);   % Line- & column-indices of cells in cluster
                plot(rVect(icn)+dr/2,mVect(iln)+dm/2,'ow')
                plot(rVect(icm)+dr/2,mVect(ilm)+dm/2,'ow','markerFaceColor','y')
                1+1;
            end
        end
        
        % Update cellList & clusterList
        cid                    = cid + 1;
        clusterList.ii{cid}    = ii_cList';
        cellList.cid(ii_cList) = cid;
        
        % Print summary
        nfields = numel(ii_cList);
        [il,ic] = ind2sub(size(ndat),ii_cList);
        mtmp    = mVect(il);
        rtmp    = rVect(ic);
        strng = sprintf('New cell: #%i, %i fields, m-range [%3.1f-%3.1f], r-range [%3.1fkm-%3.1fkm]\n', ...
            cid, nfields, min(mtmp), max(mtmp)+dm, min(rtmp), max(rtmp)+dr);
        fprintf(1,strng)
        1+1;
        
        % Compute list of bounding lines of cluster
        % 1. Make a list of 4 surrounding lines from each cell
        % 2. Remove doubles
        
        
    % Case 2: there are no unmerged neighbours
    % -->     find nearest neighbour in r-direction that already belongs to 
    %         a cluster & merge current cell to that cluster
    else
        [il,ic] = ind2sub(size(ndat),ii);
        
        itmp  = [(1:nr-1)',repmat(il,nr-1,1)];            % col and line indices on same line
        iitmp = sub2ind(size(ndat),itmp(:,2),itmp(:,1));  % corresponding linear indices
        
        % Find the nearest cell that has ndat>nmin
        hasData  = ndat(iitmp)>=nmin;
        ivect    = 1:numel(hasData);
        ihasData = ivect(hasData);
        [~,idx]  = min(abs(ihasData-ic));
        icn      = ihasData(idx);                  % Column index of nearest neighbour with enough data
        iin      = sub2ind(size(ndat),il,icn);     % Linear index of nearest neighbour with enough data
        
        % Add ii^th cell to merged cell that contains iin^th cell
        cid_tmp                 = cellList.cid(iin);             % Find cell id
        ii_cList                = [clusterList.ii{cid_tmp}, ii]; % Load linear cell indices & add current linear index
        clusterList.ii{cid_tmp} = ii_cList;                      % Update entry in clusterList
        
        % Count #data points after adding current field, update cellList
        %n                           = cellList.ndat(ii_cList(1)) +  ndat(ii);
        n                           = ndat(ii_cList(1)) +  ndat(ii);
        %cellList.ndat    (ii_cList) = n; 
        cellList.cid     (ii_cList) = cid_tmp;
        cellList.isMerged(ii_cList) = true;
        
        % Update ndat
        ndat(ii_cList) = n;
        
        % Print summary
        mtmp  = mVect(il)+dm/2;
        rtmp  = rVect(ic)+dr/2;
        strng = sprintf('Adding single field (m%4.2f / %4.1fkm / index %i) to cell nr. %i\n', mtmp,rtmp,ii, cid_tmp);
        fprintf(1,strng)
        
    end
    
    % Plot boarders around merged cells
        if o_debug
    
            % Find cells with more than one cell-index
            idx = find(cellfun(@(x) numel(x), clusterList.ii)>1);
            for i = 1:numel(idx)
    
                ix = clusterList.ii{idx(i)};
                for j = 1:numel(ix)
                    [a,b] = ind2sub(size(ndat),ix(j));
                    m     = mVect(a);
                    r     = rVect(b);
                    gcf; hold on;
                    rectangle('Position',[r,m,dr,dm],'edgeColor','w')
                end
            end
        end
    1+1;
    
    %ni = numel(find(cellList.ndat<nmin & cellList.ndat>0));
    ni = numel(find(ndat<nmin & ndat>0));
end

fprintf(1,'\nAdding single cells with enough data to cellList ...\n\n')
%idxSingles = find(cellList.ndat>=nmin & cellList.isMerged==0);
idxSingles = find(ndat(:)>=nmin & cellList.isMerged==0);
for i = 1:numel(idxSingles)
    ii                  = idxSingles(i);
    cid                 = cid+1;
    clusterList.ii{cid} = ii;
    
    %cellList.ndat(ii)   = ndat(ii);
    cellList.cid(ii)    = cid;
end

% Remove empty entries in clusterList
lastIdx        = find(cellfun(@(x) ~isempty(x), clusterList.ii),1,'last');
clusterList.ii = clusterList.ii(1:lastIdx);

% Check if every cluster has ndat>nmin
ncl = numel(clusterList.ii);
for icl = 1:ncl
    ii   = clusterList.ii{icl};
    n1   = ndat_bak(ii);
    nsum = sum(n1);
    nn   = unique(ndat(ii));
    if ~isequal(nsum,nn) 
        1+1;
    end
    %ntot = sum(nn)
end

% Why does nCells+nNaughts not equal numel(ndat(:)) ???
nCells      = numel(cell2mat(clusterList.ii'));
%nNaughts    = sum(cellList.ndat==0 & cellList.isMerged==false);
nNaughts    = sum(ndat==0 & cellList.isMerged==false);
discrepancy = ncells+nNaughts - numel(ndat(:))









    function [ii_newNeighbours] = find_and_check_neighbourCells(ii,linVect,colVect,isMerged)
        % ii are linear indices, as opposed to row and column indices
        
        nl    = numel(linVect);
        nc    = numel(colVect);
        iimax = (nl-1)*(nc-1);
        
        % Magnitude of ii^th cell
        [a,b] = ind2sub([nl-1 nc-1],ii);
        mii   = linVect(a);
        
        
        % Linear indices of 4 possible neighbours
        ii_newNeighbours = [ii-1; ii+1; ii-nl+1; ii+nl-1];
        
        % Avoid cells with indices out of box
        ii_newNeighbours = ii_newNeighbours( ii_newNeighbours<=iimax & ii_newNeighbours>0 );
        
        % Avoid cells that have already been merged with other cells
        ii_newNeighbours = ii_newNeighbours( ~isMerged(ii_newNeighbours));
        
        % Avoid comining cells from opposite side of parameter space
        [a,~]            = ind2sub([nl-1 nc-1],ii_newNeighbours);
        mnew             = linVect(a);
        mDiff            = abs(mii-mnew);
        ii_newNeighbours = ii_newNeighbours(mDiff<3);
        
    end
end